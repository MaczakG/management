const express = require("express");
const cors = require("cors");
const { MongoClient } = require("mongodb");
const nodemailer = require("nodemailer");
const cron = require("node-cron");

const app = express();
app.use(cors());
app.use(express.json());

// üîπ Szolg√°ltat√°s neve ‚Äì t√∂bb szolg√°ltat√°s eset√©n √≠gy azonos√≠that√≥
const serviceName = "PartnerListService";

// üîπ MongoDB kapcsolat
const client = new MongoClient(
  "mongodb+srv://CMS_BOGRAPHIC:Kiralyok007@mgf.ym6ix.mongodb.net/?retryWrites=true&w=majority"
);

let partnerCollection;
let serviceCollection;
let logsCollection;

// --- Adatb√°zis csatlakoz√°s ---
async function connectDB() {
  await client.connect();
  const mainDB = client.db("MAIN_DATABASE");

  partnerCollection = mainDB.collection("Partner_datas"); // partnerek
  serviceCollection = mainDB.collection("Service"); // c√≠mzettek, be√°ll√≠t√°sok
  logsCollection = mainDB.collection("service_logs"); // logok

  console.log("‚úÖ MongoDB connected ‚Äì MAIN_DATABASE alatt minden kollekci√≥ el√©rhet≈ë.");
}
connectDB();

// --- Log √≠r√°s ---
async function writeLog(status, message, details = {}) {
  const logEntry = {
    serviceName, // pl. PartnerListService
    timestamp: new Date(),
    status, // "INFO", "SUCCESS", "ERROR"
    message,
    details
  };

  try {
    await logsCollection.insertOne(logEntry);
  } catch (err) {
    console.error("‚ùå Log ment√©si hiba:", err.message);
  }

  console.log(`[${serviceName}] [${status}] ${message}`);
}

// --- HTML t√°bl√°zat gener√°l√°sa ---
function generateHTMLTable(data) {
  if (!data.length) return "<p>Nincs el√©rhet≈ë partner.</p>";

  let table = `
    <table border="1" cellspacing="0" cellpadding="5" style="border-collapse: collapse; width: 100%;">
      <thead style="background-color: #f2f2f2;">
        <tr>
          <th>ID</th><th>TaskID</th><th>Name</th><th>Partner_type</th><th>Country</th>
          <th>Zip</th><th>City</th><th>Street</th><th>Vat</th><th>EU_vat</th>
          <th>Finance_type</th><th>Reg_number</th><th>Email</th>
        </tr>
      </thead>
      <tbody>
  `;

  data.forEach(item => {
    table += `
      <tr>
        <td>${item.ID || ""}</td>
        <td>${item.TaskID || ""}</td>
        <td>${item.Name || ""}</td>
        <td>${item.Partner_type || ""}</td>
        <td>${item.Country || ""}</td>
        <td>${item.Zip || ""}</td>
        <td>${item.City || ""}</td>
        <td>${item.Street || ""}</td>
        <td>${item.Vat || ""}</td>
        <td>${item.EU_vat || ""}</td>
        <td>${item.Finance_type || ""}</td>
        <td>${item.Reg_number || ""}</td>
        <td>${item.Email || ""}</td>
      </tr>
    `;
  });

  table += "</tbody></table>";
  return table;
}

// --- E-mail k√ºld√©s ---
async function sendEmail(to, name, htmlTable) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: "penzugy.mgf@gmail.com",
      pass: "ufct kbek ysrz pegi" // Gmail App Password
    }
  });

  const htmlContent = `
    <p>Tisztelt ${name},</p>
    <p>Az aktu√°lisan teljes√≠t≈ë partnerek list√°ja:</p>
    ${htmlTable}
    <p>√údv√∂zlettel,<br>Automata √©rtes√≠t≈ë (${serviceName})</p>
  `;

  const mailOptions = {
    from: '"Automata √©rtes√≠t≈ë" <penzugy.mgf@gmail.com>',
    to,
    subject: "Heti partneri st√°tusz ‚Äì Folyamatos teljes√≠t√©sek",
    html: htmlContent
  };

  try {
    await transporter.sendMail(mailOptions);
    await writeLog("SUCCESS", `E-mail elk√ºldve: ${to}`);
  } catch (error) {
    await writeLog("ERROR", `E-mail k√ºld√©si hiba: ${error.message}`, { to });
    throw error;
  }
}

// --- F≈ë folyamat ---
async function runWeeklySummary() {
  await writeLog("INFO", "‚ñ∂ Heti √∂sszefoglal√≥ ind√≠t√°sa...");

  try {
    // 1Ô∏è‚É£ Lek√©rdezz√ºk az √∂sszes c√≠mzettet, ahol futtatas = "Igen"
    const recipients = await serviceCollection
      .find({ futtatas: { $regex: /^igen$/i } })
      .toArray();

    if (!recipients.length) {
      await writeLog("INFO", "‚èπ Nincs enged√©lyezett c√≠mzett.");
      return;
    }

    // 2Ô∏è‚É£ 'Folyamatos' partnerek lek√©rdez√©se
    const partners = await partnerCollection
      .find({ Completion_type: "Folyamatos" })
      .toArray();

    if (!partners.length) {
      await writeLog("INFO", "‚ùó Nincs 'Folyamatos' partner az adatb√°zisban.");
      return;
    }

    // 3Ô∏è‚É£ HTML t√°bl√°zat gener√°l√°sa
    const htmlTable = generateHTMLTable(partners);

    // 4Ô∏è‚É£ E-mail k√ºld√©se minden c√≠mzettnek
    for (const recipient of recipients) {
      await sendEmail(recipient.cimzett_email, recipient.cimzett_nev, htmlTable);
      await writeLog("SUCCESS", `Heti √∂sszefoglal√≥ elk√ºldve: ${recipient.cimzett_email}`, {
        recipient: recipient.cimzett_email,
        count: partners.length
      });
    }
  } catch (err) {
    await writeLog("ERROR", "Hiba a heti √∂sszefoglal√≥ sor√°n.", { error: err.message });
    console.error("‚ùå Hiba:", err);
  }
}


// --- √útemez√©s: minden h√©tf≈ën 08:00 ---
cron.schedule("0 8 * * 1", () => {
  runWeeklySummary().catch(console.error);
});

// --- Manu√°lis futtat√°s ---
app.get("/run-weekly-summary", async (req, res) => {
  try {
    await runWeeklySummary();
    res.send("E-mail k√ºld√©s lefutott √©s logolva lett.");
  } catch (err) {
    console.error(err);
    res.status(500).send("Hiba a futtat√°s sor√°n. N√©zd meg a service_logs kollekci√≥t.");
  }
});

app.listen(3001, () =>
  console.log(`[${serviceName}] running on http://127.0.0.1:3001`)
);

